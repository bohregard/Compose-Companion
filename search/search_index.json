{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compose Companion","text":"<p>Root <code>build.gradle.kts</code> repository configuration. Note: You'll need to create a github token to access GitHub Packages.</p> Kotlin <pre><code>maven {\n    name = \"GitHubPackages\"\n    url = uri(\"https://maven.pkg.github.com/bohregard/Shared-Library\")\n    credentials {\n        username = githubUser\n        password = githubToken\n    }\n}\n</code></pre>"},{"location":"components/animated-textfield/","title":"Animated Text Field","text":"<p>An animated text field that is configurable the same way a TextField is configured. The animation is triggered whenever the max characters are reached. If <code>Int.MAX</code> is specified as the max characters, it effectively removes the animation.</p> <p></p>"},{"location":"components/animated-textfield/#usage","title":"Usage","text":"KotlinGroovy <pre><code>implementation(\"com.bohregard:animated-textfield:&lt;latest-version&gt;\")\n</code></pre> <pre><code>implementation 'com.bohregard:animated-textfield:&lt;latest-version&gt;'\n</code></pre> <pre><code>AnimatedTextField(\n    animate = true,\n    colors = AnimatedTextFieldDefaults.colors(),\n    enabled = true,\n    error = false,\n    errorMessage = null,\n    interactionSource = remember { MutableInteractionSource() },\n    keyboardActions = KeyboardActions(),\n    keyboardOptions = KeyboardOptions(\n        autoCorrect = false,\n        capitalization = KeyboardCapitalization.Words,\n        imeAction = ImeAction.Next\n    ),\n    leadingIcon = null,\n    maxCharacters = null,\n    maxLines = Int.MAX_VALUE,\n    modifier = Modifier,\n    onClear = {},\n    onValueChange = { value -&gt; },\n    readOnly = false,\n    placeholder = null,\n    text = \"\",\n    visualTransformation = VisualTransformation.None\n)\n</code></pre> <p>The <code>AnimatedTextFieldColors</code> interface can be used to customize the colors. The default is the MaterialTheme's primary colors. <code>AnimatedTextFieldDefaults.colors()</code> can also be customized with the disabled color and the background color.</p>"},{"location":"components/animated-textfield/#reference","title":"Reference","text":"Property Description Required animate Animate when the user enters more characters than the max x colors The AnimatedTextFieldColors to render x enabled Whether the user can interact with the composable x error Boolean value to set the error state x errorMessage Error message to show when the error state is enabled x interactionSource x keyboardActions x keyboardOptions x leadingIcon Leading icon for the TextField x maxCharacters If set, shows a counter in the lower right y maxLines If set, shows a counter in the lower right x modifier If set, shows a counter in the lower right x onClear Callback when the on clear icon is selected y onValueChange Callback when the TextField is changed y readOnly Callback when the TextField is changed x placeholder Placeholder text when no value is set x text The value of text to be rendered y visualTransformation Visual transformation of the text if any x"},{"location":"components/datetime/","title":"Date Time Picker","text":"<p>A set of date/time pickers. They can be used separately or the combined <code>DateTimePicker</code> can be used if both are needed. Returns a <code>LocalDateTime</code> object which can be converted to <code>Instant</code> if a UTC time is needed.</p> <p> </p>"},{"location":"components/datetime/#usage","title":"Usage","text":"KotlinGroovy <pre><code>implementation(\"com.bohregard:datetime-picker:&lt;latest-version&gt;\")\n</code></pre> <pre><code>implementation 'com.bohregard:datetime-picker:&lt;latest-version&gt;'\n</code></pre> <pre><code>var showDateTimeDialog by remember { mutableStateOf(false) }\nvar showDateDialog by remember { mutableStateOf(false) }\nvar showTimeDialog by remember { mutableStateOf(false) }\nvar enabled by remember { mutableStateOf(true) }\n\nDateTimePicker(\n    date = LocalDateTime.now(),\n    onDateSelected = {\n        showDateTimeDialog = false\n    },\n    onDialogDismissed = {\n        showDateTimeDialog = false\n    },\n    showDialog = showDateTimeDialog\n)\n\nDatePicker(\n    date = LocalDate.now(),\n    onDateSelected = {\n        showDateDialog = false\n    },\n    onDialogDismissed = {\n        showDateDialog = false\n    },\n    showDialog = showDateDialog\n)\n\nTimePicker(\n    time = LocalTime.now(),\n    onTimeSelected = {\n        showTimeDialog = false\n    },\n    onDialogDismissed = {\n        showTimeDialog = false\n    },\n    showDialog = showTimeDialog\n)\n</code></pre>"},{"location":"components/exoplayer/","title":"ExoPlayer Composable","text":"<p>A wrapper around ExoPlayer's UI view. Use either the <code>ExoPlayerDashComposable</code> or the <code>ExoPlayerMp4Composable</code>. Both return the <code>ExoPlayer</code> object for use as needed. If you need more control over the <code>ExoPlayer</code> object, you can use the <code>BaseExoPlayerComposable</code> and pass in your own player.</p> <p>When the composable is disposed, the player is released. However if you use the <code>BaseExoPlayerComposable</code> you are responsible for releasing the player.</p> <p>An XML layout can be used as needed. Follow the instructions on the official documentation. A composable can also be used if the <code>controls</code> field is passed in. This uses a <code>BoxScope</code> and is overlayed on the component. See the example below for more details on <code>controls</code>.</p> <p></p>"},{"location":"components/exoplayer/#configuration","title":"Configuration","text":"<p>The <code>ExoPlayerConfig</code> object can be used to control the player's default behavior when launched. There is an <code>ExoPlayerConfig.DEFAULT</code> object if you are no concerned about the behaviors.</p>"},{"location":"components/exoplayer/#cache","title":"Cache","text":"<p>A DataStoreCache object needs to be defined in and passed in via the <code>CompositionLocalProvider</code>. This object relies on the <code>SimpleCache</code> object and can only have one instance per directory at a time.</p>"},{"location":"components/exoplayer/#zoompan","title":"Zoom/Pan","text":"<p>Zooming and Panning is supported if it's needed. To enabled, set <code>zoomable = true</code> on the <code>ExoPlayerConfig</code> object. The minimum zoom is 1f and the maximum zoom is 6f. The panning is bounded and clipped by the box it's contained in.</p> <p>Info</p> <p>If you have controls defined (via compose or XML), they will take precedent over the drag/pan gestures. However the controls can be placed below the ExoPlayer view as necessary.</p>"},{"location":"components/exoplayer/#example-code","title":"Example code:","text":"<pre><code>implementation 'com.bohregard:exoplayercomposable:&lt;latest-version&gt;'\n</code></pre> <pre><code>@Composable\nfun ExoplayerUi(dataStoreCache: DataStoreCache) {\n    CompositionLocalProvider(\n        LocalDataStoreCache provides dataStoreCache\n    ) {\n        ExoPlayerDashComposable(\n            config = ExoPlayerConfig.DEFAULT,\n            modifier = Modifier\n                .aspectRatio(16 / 9f)\n                .fillMaxWidth(),\n            dashUrl = \"http://ftp.itec.aau.at/datasets/DASHDataset2014/BigBuckBunny/2sec/BigBuckBunny_2s_onDemand_2014_05_09.mpd\",\n            onError = {\n                Text(\"Error Playing Video\")\n            },\n            controls = { player, hasVolume, timeline, duration, isPlaying -&gt;\n                Column(\n                    modifier = Modifier\n                        .fillMaxSize()\n                        .clickable {\n                            if (player.isPlaying) {\n                                player.pause()\n                            } else {\n                                player.play()\n                            }\n                        },\n                    verticalArrangement = Arrangement.Center,\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    AnimatedVisibility(\n                        visible = !isPlaying,\n                        enter = fadeIn(),\n                        exit = fadeOut()\n                    ) {\n                        Image(\n                            modifier = Modifier.size(32.dp),\n                            painter = painterResource(id = R.drawable.ic_play),\n                            contentDescription = \"Play\"\n                        )\n                    }\n                }\n            }\n        )\n    }\n}\n</code></pre>"},{"location":"components/exoplayer/#todo","title":"Todo","text":"<ul> <li> SimpleCache and DataStoreCache should be optional and part of the ExoPlayerConfig object </li> <li> OnError should pass back the exception that the player threw (if any)</li> </ul>"},{"location":"components/gallery/","title":"Gallery","text":"<p>A simple wrapper around horizontal pager to display images/videos.</p> <p>Info</p> <p>Due to the way the pager works, if you specify images of different aspect ratios, the largest aspect ratio is used and will result in white space surrounding smaller aspect ratios.</p>"},{"location":"components/gallery/#usage","title":"Usage","text":"<p>The <code>Gallery</code> composable expects a list of type <code>BaseGalleryItem</code>s which have a few super types: <code>WebImage</code>, <code>ResourceImage</code>, and <code>VideoItem</code>. <code>WebImage</code> uses coil to resolve the url and display the image. If <code>VideoItem</code> is specified in the list, it is up to the user to define the behavior in the <code>onVideoLayout</code> callback of <code>Gallery</code>.</p> <p>If custom items are needed to render (for other Image libraries like Picasso, Glide, et cetera), you can specify custom classes that extend <code>BaseGalleryItem</code> and pass in a callback to <code>onCustomLayout</code>.</p> <p>The default content scale is <code>ContentScale.Fit</code>, </p>"},{"location":"components/gallery/#simple-usage","title":"Simple Usage","text":"<pre><code>// Define the items to be used\nval items = listOf&lt;BaseGalleryItem&gt;(\n    WebImage(3000, 4000, \"https://preview.redd.it/fqdk19afys791.jpg?width=4000&amp;format=pjpg&amp;auto=webp&amp;s=822d2d2c7248b14959bf4ce9f219f779169ef9d8\"),\n    WebImage(4000, 3000, \"https://preview.redd.it/reafmt1gys791.jpg?width=3000&amp;format=pjpg&amp;auto=webp&amp;s=1c5fe37518be2d2954835027c13d364784200a0a\"),\n//    WebImage(600, 800, \"https://picsum.photos/800/600\"),\n)\n\nGallery(\n    items = items,\n)\n</code></pre>"},{"location":"components/markdown/","title":"Markdown Parser","text":"<p>A markdown parser for compose. Handles the standard markdown rules as specified by commonmark.org.</p> <p> </p> <p>Bug</p> <p>Images are treated as block items always at this time by the parse which means they don't always end up in the correct place (especially when mixed with block/inline items)</p>"},{"location":"components/markdown/#usage","title":"Usage","text":""},{"location":"components/markdown/#styling","title":"Styling","text":"<p>A text style can be passed into the <code>MarkdownText</code> composable to set the style. The default is <code>TextStyle(color = MaterialTheme.colorScheme.onSurface)</code></p> <pre><code>MarkdownText(\n    markdown = markdown,\n    textStyle = MaterialTheme.typography.bodyMedium\n)\n</code></pre>"},{"location":"components/markdown/#markdown-configuration","title":"Markdown Configuration","text":"<p>Provides an object to customize some of the behavior. The configuration object can be used to control touch events for text:</p> <pre><code>val configuration = MarkdownConfiguration(\n    onClickEvent = {\n        // Do something here\n    }\n)\n\nMarkdownText(\n    markdown = markdown,\n    configuration = configuration\n)\n</code></pre> <pre><code>onClickEvent()\n</code></pre>"},{"location":"components/markdown/#example-code","title":"Example code:","text":"KotlinGroovy <pre><code>implementation(\"com.bohregard:markdown:&lt;latest-version&gt;\")\n</code></pre> <pre><code>implementation 'com.bohregard:markdown:&lt;latest-version&gt;'\n</code></pre> <pre><code>var markdown by remember { mutableStateOf(\"# Some example markdown\") }\nMarkdownText(\n    markdown = markdown,\n    textStyle = MaterialTheme.typography.bodyMedium\n)\n</code></pre>"},{"location":"components/modifiers/","title":"Modifiers","text":""},{"location":"components/modifiers/#fullyvisible","title":"FullyVisible","text":"<p>A modifier to determine if a composable is visible in the root parent</p>"},{"location":"components/modifiers/#example-code","title":"Example Code","text":"<pre><code>@Composable\nfun VisibleUi() {\n    LazyColumn(\n        modifier = Modifier.fillMaxSize()\n    ) {\n\n        items(20) { item -&gt;\n            var layout by remember { mutableStateOf(Offset.Zero) }\n            var size by remember { mutableStateOf(IntSize(0, 0)) }\n            var visible by remember { mutableStateOf(false) }\n            Column(\n                modifier = Modifier\n                    .border(width = 1.dp, color = Color.Red)\n                    .height(100.dp)\n                    .fillMaxWidth()\n                    .onPlaced {\n                        layout = it.positionInRoot()\n                        size = it.size\n                    }\n                    .fullyVisible { visible = it },\n                verticalArrangement = Arrangement.Center\n            ) {\n                val center = size.height / 2 + layout.y\n                val top = center - size.height / 2\n                val bottom = center + size.height / 2\n                Text(\"Top: $top\")\n                Text(\"Item: $item // Visible: $visible \")\n                Text(\"Bottom: $bottom\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"components/modifiers/#zoomable","title":"Zoomable","text":"<p>A modifier to enable zooming, panning, and rotation on an item. It has a default zoom min of 1f and a max of 6f.</p> <ul> <li> Allow zoom min/max configuration</li> <li> Allow Boundary enable/disable (currently enabled by default)</li> </ul>"},{"location":"components/modifiers/#example-code_1","title":"Example Code","text":"<pre><code>@Composable\nfun ZoomModifier() {\n    Box(\n        contentAlignment = Alignment.Center,\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(400.dp)\n            .background(color = Color.Red)\n    ) {\n        Box(\n            contentAlignment = Alignment.Center,\n            modifier = Modifier\n                .zoomable(enableRotation = true)\n                .size(200.dp)\n                .background(color = Color.Blue)\n        ) {\n            Text(\"Testing\")\n        }\n    }\n}\n</code></pre>"}]}